# -*- coding: utf-8 -*-
"""Popularity of blogs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1frIT2eVqeU9lgjortVvcBcO6UaYSpn60
"""

!pip install pymongo[srv]

from datetime import datetime

import pymongo
from pymongo import MongoClient
import urllib.parse

username = urllib.parse.quote_plus('')#give your username
password = urllib.parse.quote_plus('')#give your password

url = "".format(username, password)#give the url for the mongodb database


cluster = MongoClient(url)
db = cluster['']#mention the cluster you want to access 
collection = db['']#mention the collection inside the cluster you want to access

for i in db.posts.find({}):
  print(i.keys())
  break

# just for the visualiztion
import pandas as pd
lst=[]
for i in db.posts.find({}):
  lst.append((i['_id'],i['num_of_views'],len(i['likes']),i['comments'],i['num_of_shares'],i['published_on'],divmod((datetime.now()-i['published_on']).total_seconds(),3600)[0]))
df=pd.DataFrame(lst,columns=['post_id','num_of_views','likes','comments','num_of_shares','date_of_publish','hours'])
df

post_data={} # dictionary of posts data
for i in db.posts.find({}):
  post_data[str(i['_id'])]={}
  post_data[str(i['_id'])]['num_of_views']=i['num_of_views']
  post_data[str(i['_id'])]['likes']=len(i['likes'])
  post_data[str(i['_id'])]['comments']=i['comments']
  post_data[str(i['_id'])]['num_of_shares']=i['num_of_shares']
  duration_in_s = (datetime.now()-i['published_on']).total_seconds()
  post_data[str(i['_id'])]['hours']=divmod(duration_in_s, 3600)[0]

post_data

def popularity_of_blogs():
  global post_data
  score={}
  for id in post_data.keys():
    score[id]=post_data[id]['num_of_views']*200+post_data[id]['likes']*400+post_data[id]['comments']*600+post_data[id]['num_of_shares']*1000
    weeks=post_data[id]['hours']//168
    hours=post_data[id]['hours']%168
    if weeks!=0 and hours!=0:
      score[id]=score[id]/(weeks*1000)
      score[id]=score[id]/hours
    elif weeks==0 and hours!=0:
      score[id]=score[id]/hours
    elif weeks!=0 and hours==0:
      score[id]=score[id]/(weeks*1000)
  return sorted(score.items(), key=lambda x: x[1],reverse=True)

popularity_of_blogs()

df

